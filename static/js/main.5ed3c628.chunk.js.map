{"version":3,"sources":["App.js","index.js"],"names":["App","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","wordsPerMinute","setWordsPerMinute","relativeSpeed","setRelativeSpeed","textBoxRef","useRef","calculateTypingSpeed","number","useEffect","setTimeout","time","trim","split","filter","word","length","calculateWordCount","endGame","ref","onChange","event","value","target","disabled","onClick","current","focus","color","style","colorify","ReactDOM","render","document","getElementById"],"mappings":"iKAyIeA,MAvIf,WACI,IAGA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,mBAJpB,IAItB,mBAAOG,EAAP,KAAsBC,EAAtB,KAGA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAGA,EAA4CR,mBAAS,GAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KACA,EAA0CV,mBAAS,IAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KAIMC,EAAaC,iBAAO,MAiB1B,SAASC,EAAqBC,GAC1B,OAAmB,EAAZT,EA+EX,OAfAU,qBAAU,WAEFZ,GAAiBF,EAAgB,EAEjCe,YAAW,WACPd,GAAiB,SAAAe,GAAI,OAAIA,EAAO,OACjC,KAGoB,IAAlBhB,GApBb,WAlDA,IAAgCa,EAmD5BV,GAAiB,GAGjBE,EAnEJ,SAA4BP,GAMxB,OAJiBA,EAAKmB,OAAOC,MAAM,KAELC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAEzBC,OA6DPC,CAAmBxB,IAChCS,EAAkBK,KAClBH,EAvDe,MADaI,EAwDYD,KAtD7B,MAEFC,EAAS,GACP,OAEFA,EAAS,GACP,YADN,GAgEDU,KAGL,CAACvB,EAAeE,IAGf,qCACI,6CACA,0BACIsB,IAAKd,EACLe,SApGZ,SAAsBC,GAElB,IAAOC,EAASD,EAAME,OAAfD,MACP5B,EAAQ4B,IAkGAA,MAAO7B,EACP+B,UAAW3B,IAEf,kDAAqBF,KACrB,wBACI8B,QAnDZ,WACI3B,GAAiB,GACjBF,EA5EkB,IA8ElBF,EAAQ,IACRM,EAAa,GACbE,EAAkB,GAClBE,EAAiB,IAGjBC,EAAWqB,QAAQF,UAAW,EAC9BnB,EAAWqB,QAAQC,SAyCXH,SAAU3B,EAFd,mBAGA,yCAAYI,EAAZ,UACA,8CAAiBF,KA9EzB,SAAkBI,GACd,IAAIV,EAAO,GACPmC,EAAQ,GAiBZ,MAfsB,QAAlBzB,GACAV,EAAO,UACPmC,EAAQ,CAACA,MAAO,WAGO,SAAlBzB,GACLV,EAAO,OACPmC,EAAQ,CAACA,MAAO,SAGO,SAAlBzB,IACLV,EAAO,OACPmC,EAAQ,CAACA,MAAO,QAIhB,oBAAIC,MAAOD,EAAX,SAAmBnC,IA2DlBqC,CAAS3B,OC/HtB4B,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.5ed3c628.chunk.js","sourcesContent":["import React, { useState , useEffect, useRef } from \"react\"\n\nfunction App() {\n    const STARTING_TIME = 15\n\n    //creating states to hold text and time displayed on countdown timer\n    const [text, setText] = useState(\"\")\n    const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME)\n\n    //storing isTimeRunning as a boolean state variable (false by default) to fire timer upon START button click\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    //storing wordCount as separate state to text (to store for indiv. games vs realtime tracking)\n    const [wordCount, setWordCount] = useState(0)\n\n    //secondary calculations based on wordCount\n    const [wordsPerMinute, setWordsPerMinute] = useState(0)\n    const [relativeSpeed, setRelativeSpeed] = useState(\"\")\n\n    //grabbing textarea dom element in order to be auto-focused in upon START btn click\n    //standard practice to set useRef to null.\n    const textBoxRef = useRef(null)\n\n    function handleChange(event) {\n        //destructuring event.target.value to grab input when event is fired:\n        const {value} = event.target\n        setText(value)\n    }\n\n    function calculateWordCount(text) {\n        //trim the string of any redundant spaces each side,\n        const wordsArr = text.trim().split(\" \")\n        //preventing spaces between words to count as a word,\n        const spaceRemoved = wordsArr.filter(word => word !== \"\")\n        //returning the filtered array of words:\n        return spaceRemoved.length\n    }\n\n    function calculateTypingSpeed(number) {\n        return wordCount * 4\n    }\n\n    function calculateRelativeSpeed(number) {\n        if (number === 40) {\n            return \"avg\"\n        }\n        else if (number > 40) {\n            return \"fast\"\n        }\n        else if (number < 40) {\n            return \"slow\"\n        }\n    }\n\n    function colorify(relativeSpeed) {\n        let text = \"\"\n        let color = {}\n\n        if (relativeSpeed === \"avg\") {\n            text = \"average\"\n            color = {color: \"yellow\"}\n        }\n\n        else if (relativeSpeed === \"fast\") {\n            text = \"fast\"\n            color = {color: \"blue\"}\n        }\n\n        else if (relativeSpeed === \"slow\") {\n            text = \"slow\"\n            color = {color: \"red\"}\n        }\n\n        return (\n            <h2 style={color}>{text}</h2>\n        )\n    }\n\n    function startGame() {\n        setIsTimeRunning(true)\n        setTimeRemaining(STARTING_TIME)\n        //refreshing the input box, which updates according to text stored as state\n        setText(\"\")\n        setWordCount(0)\n        setWordsPerMinute(0)\n        setRelativeSpeed(\"\")\n\n        //to focus on textarea upon START btn click\n        textBoxRef.current.disabled = false\n        textBoxRef.current.focus()\n    }\n\n    function endGame() {\n        setIsTimeRunning(false)\n        //grabbing text input as string, calculate number of words,\n        //then store it to wordCount state\n        setWordCount(calculateWordCount(text))\n        setWordsPerMinute(calculateTypingSpeed(text))\n        setRelativeSpeed(calculateRelativeSpeed(calculateTypingSpeed(text)))\n    }\n\n    //useEffect is run when component updates,\n    //and then when values of timeRemaining and isTimeRunning states change\n    useEffect(() => {\n        //if start state value equals true (aka start button is clicked) && time > 0 (i.e. count still running)::\n        if (isTimeRunning && timeRemaining > 0) {\n            //setTimeout to run every 1000ms (1s)\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            }, 1000)\n        }\n        //when count reaches 0, set the isTimeRunning variable back to false:\n        else if (timeRemaining === 0) {\n            endGame()\n        }\n\n    }, [timeRemaining, isTimeRunning])\n\n    return (\n        <>\n            <h1>Speed Typer</h1>\n            <textarea\n                ref={textBoxRef}\n                onChange={handleChange}\n                value={text}\n                disabled={!isTimeRunning}\n            />\n            <h4>Time Remaining: {timeRemaining}</h4>\n            <button\n                onClick={startGame}\n                disabled={isTimeRunning}>START</button>\n            <h1>Speed: {wordsPerMinute} wpm</h1>\n            <p5>Word Count: {wordCount}</p5>\n            {colorify(relativeSpeed)}\n        </>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))\n\n"],"sourceRoot":""}