{"version":3,"sources":["App.js","index.js"],"names":["App","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","wordsPerMinute","setWordsPerMinute","endGame","trim","split","filter","word","length","calculateWordCount","useEffect","setTimeout","time","onChange","event","value","target","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"iKAsFeA,MApFf,WACI,IAGA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA0CF,mBALpB,IAKtB,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA4CR,mBAAS,GAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KA8BA,SAASC,IACLL,GAAiB,GAGjBE,EA1BJ,SAA4BP,GAMxB,OAJiBA,EAAKW,OAAOC,MAAM,KAELC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAEzBC,OAoBPC,CAAmBhB,IAChCS,EAjBmB,EAAZH,GAqCX,OAfAW,qBAAU,WAEFb,GAAiBF,EAAgB,EAEjCgB,YAAW,WACPf,GAAiB,SAAAgB,GAAI,OAAIA,EAAO,OACjC,KAGoB,IAAlBjB,GACDQ,MAGT,CAACR,EAAeE,IAGf,qCACI,6CACA,0BACIgB,SAzDZ,SAAsBC,GAElB,IAAOC,EAASD,EAAME,OAAfD,MACPrB,EAAQqB,IAuDAA,MAAOtB,EACPwB,UAAWpB,IAEf,kDAAqBF,KACrB,wBACIuB,QA5CZ,WACIpB,GAAiB,GACjBF,EAjCkB,IAmClBF,EAAQ,IACRM,EAAa,GACbE,EAAkB,IAuCVe,SAAUpB,EAFd,mBAGA,yCAAYI,EAAZ,UACA,8CAAiBF,SC5E7BoB,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.e5e669c5.chunk.js","sourcesContent":["import React, { useState , useEffect } from \"react\"\n\nfunction App() {\n    const STARTING_TIME = 15\n\n    //creating states to hold text and time displayed on countdown timer\n    const [text, setText] = useState(\"\")\n    //storing the state as 5 (seconds) as initial\n    const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME)\n    //storing isTimeRunning as a boolean state variable (false by default) to fire timer upon START button click\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    //storing wordCount as separate state to text (to store for indiv. games vs realtime tracking)\n    const [wordCount, setWordCount] = useState(0)\n    const [wordsPerMinute, setWordsPerMinute] = useState(0)\n\n    function handleChange(event) {\n        //destructuring event.target.value to grab input when event is fired:\n        const {value} = event.target\n        setText(value)\n    }\n\n    function calculateWordCount(text) {\n        //trim the string of any redundant spaces each side,\n        const wordsArr = text.trim().split(\" \")\n        //preventing spaces between words to count as a word,\n        const spaceRemoved = wordsArr.filter(word => word !== \"\")\n        //returning the filtered array of words:\n        return spaceRemoved.length\n    }\n\n    function calculateTypingSpeed(text) {\n        return wordCount * 4\n    }\n\n    function startGame() {\n        setIsTimeRunning(true)\n        setTimeRemaining(STARTING_TIME)\n        //refreshing the input box, which updates according to text stored as state\n        setText(\"\")\n        setWordCount(0)\n        setWordsPerMinute(0)\n    }\n\n    function endGame() {\n        setIsTimeRunning(false)\n        //grabbing text input as string, calculate number of words,\n        //then store it to wordCount state\n        setWordCount(calculateWordCount(text))\n        setWordsPerMinute(calculateTypingSpeed(text))\n    }\n\n    //useEffect is run when component updates,\n    //and then when values of timeRemaining and isTimeRunning states change\n    useEffect(() => {\n        //if start state value equals true (aka start button is clicked) && time > 0 (i.e. count still running)::\n        if (isTimeRunning && timeRemaining > 0) {\n            //setTimeout to run every 1000ms (1s)\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            }, 1000)\n        }\n        //when count reaches 0, set the isTimeRunning variable back to false:\n        else if (timeRemaining === 0) {\n                endGame()\n        }\n\n    }, [timeRemaining, isTimeRunning])\n\n    return (\n        <>\n            <h1>Speed Typer</h1>\n            <textarea\n                onChange={handleChange}\n                value={text}\n                disabled={!isTimeRunning}\n            />\n            <h4>Time Remaining: {timeRemaining}</h4>\n            <button\n                onClick={startGame}\n                disabled={isTimeRunning}>START</button>\n            <h1>Speed: {wordsPerMinute} wpm</h1>\n            <p5>Word count: {wordCount}</p5>\n        </>\n    )\n}\n\nexport default App\n\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))\n\n"],"sourceRoot":""}