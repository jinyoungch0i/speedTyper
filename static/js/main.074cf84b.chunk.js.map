{"version":3,"sources":["hooks/useTypingGame.js","App.js","index.js"],"names":["useTypingGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","wordsPerMinute","setWordsPerMinute","relativeSpeed","setRelativeSpeed","textBoxRef","useRef","handleChange","event","value","target","calculateWordCount","trim","split","filter","word","length","calculateTypingSpeed","calculateRelativeSpeed","number","colorify","style","startGame","current","disabled","focus","endGame","newWordCount","newTypingSpeed","useEffect","setTimeout","time","App","ref","onChange","onClick","ReactDOM","render","document","getElementById"],"mappings":"iKAuJeA,MApJf,WAA2C,IAApBC,EAAmB,uDAAJ,GAGlC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,mBAASD,GAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KAGA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAGA,EAA4CR,mBAAS,GAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KACA,EAA0CV,mBAAS,IAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KAIMC,EAAaC,iBAAO,MAE1B,SAASC,EAAaC,GAElB,IAAOC,EAASD,EAAME,OAAfD,MACPf,EAAQe,GAGZ,SAASE,EAAmBlB,GAMxB,OAJiBA,EAAKmB,OAAOC,MAAM,KAELC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAEzBC,OAIxB,SAASC,EAAqBlB,EAAWR,GAErC,OAAOQ,GADc,GAAKR,GAI9B,SAAS2B,EAAuBC,GAC5B,OAAIA,EAAS,GAAW,OACfA,EAAS,GAAW,MACpBA,EAAS,GAAW,OACpBA,EAAS,IAAY,WAClB,MAIhB,SAASC,EAASjB,GACd,IAAIV,EAAO,GAEP4B,EAAQ,GA6BZ,MA3BsB,SAAlBlB,GACAV,EAAO,OAGP4B,EAAK,MAAY,OAGM,QAAlBlB,GACLV,EAAO,UACP4B,EAAK,MAAY,UAGM,SAAlBlB,GACLV,EAAO,OACP4B,EAAK,MAAY,UAGM,aAAlBlB,GACLV,EAAO,WACP4B,EAAK,MAAY,kBAGM,QAAlBlB,IACLV,EAAO,MACP4B,EAAK,MAAY,UAIjB,oBAAIA,MAAOA,EAAX,SAAmB5B,IAI3B,SAAS6B,IACLxB,GAAiB,GACjBF,EAAiBL,GAEjBG,EAAQ,IACRM,EAAa,GACbE,EAAkB,GAClBE,EAAiB,IAGjBC,EAAWkB,QAAQC,UAAW,EAC9BnB,EAAWkB,QAAQE,QAGvB,SAASC,IACL,IAAMC,EAAehB,EAAmBlB,GAClCmC,EAAiBX,EAAqBU,EAAcpC,GAG1DS,EAAa2B,GACbzB,EAAkB0B,GAClBxB,EAAiBc,EAAuBU,IAGxC9B,GAAiB,GAuBrB,OAlBA+B,qBAAU,WAEFhC,GAAiBF,EAAgB,EAEjCmC,YAAW,WACPlC,GAAiB,SAAAmC,GAAI,OAAIA,EAAO,OACjC,KAIoB,IAAlBpC,GACL+B,MAGL,CAAC/B,EAAeE,IAIZ,CACHQ,aACAE,eACAd,OACAI,gBACAF,gBACA2B,YACArB,iBACAF,YACAqB,WACAjB,kBCpGO6B,MA3Cf,WAGI,MAWI1C,IAVAe,EADJ,EACIA,WACAE,EAFJ,EAEIA,aACAd,EAHJ,EAGIA,KACAI,EAJJ,EAIIA,cACAF,EALJ,EAKIA,cACA2B,EANJ,EAMIA,UACArB,EAPJ,EAOIA,eACAF,EARJ,EAQIA,UACAqB,EATJ,EASIA,SACAjB,EAVJ,EAUIA,cAOJ,OACI,qCACI,6CACA,0BACI8B,IAAK5B,EACL6B,SAAU3B,EACVE,MAAOhB,EACP+B,UAAW3B,IAEf,kDAAqBF,KACrB,wBACIwC,QAASb,EACTE,SAAU3B,EAFd,mBAMA,yCAAYI,EAAZ,UACA,8CAAiBF,KAChBqB,EAASjB,OCpCtBiC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.074cf84b.chunk.js","sourcesContent":["import {useState, useEffect, useRef} from \"react\"\n\n//custom hook defined with default param of value 15 (seconds)\nfunction useTypingGame(startingTime = 15) {\n\n    //creating states to hold text and time displayed on countdown timer\n    const [text, setText] = useState(\"\")\n    const [timeRemaining, setTimeRemaining] = useState(startingTime)\n\n    //storing isTimeRunning as a boolean state variable (false by default) to fire timer upon START button click\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    //storing wordCount as separate state to text (to store for indiv. games vs realtime tracking)\n    const [wordCount, setWordCount] = useState(0)\n\n    //secondary calculations based on wordCount\n    const [wordsPerMinute, setWordsPerMinute] = useState(0)\n    const [relativeSpeed, setRelativeSpeed] = useState(\"\")\n\n    //grabbing reference to textarea dom element in order to be auto-focused in upon START btn click\n    //standard practice to initialise useRef passing in null.\n    const textBoxRef = useRef(null)\n\n    function handleChange(event) {\n        //destructuring event.target.value to grab input when event is fired:\n        const {value} = event.target\n        setText(value)\n    }\n\n    function calculateWordCount(text) {\n        //trim the string of any redundant spaces each side,\n        const wordsArr = text.trim().split(\" \")\n        //preventing spaces between words to count as a word,\n        const spaceRemoved = wordsArr.filter(word => word !== \"\")\n        //returning the filtered array of words:\n        return spaceRemoved.length\n    }\n\n    //determining the multiplier for the words per minute calculation\n    function calculateTypingSpeed(wordCount, startingTime) {\n        const secondsToMin = 60 / startingTime\n        return wordCount * secondsToMin\n    }\n\n    function calculateRelativeSpeed(number) {\n        if (number < 45) return \"slow\"\n        else if (number < 60) return \"avg\"\n        else if (number < 80) return \"fast\"\n        else if (number < 100) return \"advanced\"\n        else return \"pro\"\n    }\n\n    //to conditionally render the relativeSpeed text, with its respective color scheme\n    function colorify(relativeSpeed) {\n        let text = \"\"\n        //initialising style to an obj to plug style attribute directly to JSX\n        let style = {}\n\n        if (relativeSpeed === \"slow\") {\n            text = \"SLOW\"\n            //assigning style object with key of color\n            //and value of \"red\" (ie. {color: \"red\"})\n            style[\"color\"] = \"red\"\n        }\n\n        else if (relativeSpeed === \"avg\") {\n            text = \"AVERAGE\"\n            style[\"color\"] = \"orange\"\n        }\n\n        else if (relativeSpeed === \"fast\") {\n            text = \"FAST\"\n            style[\"color\"] = \"yellow\"\n        }\n\n        else if (relativeSpeed === \"advanced\") {\n            text = \"ADVANCED\"\n            style[\"color\"] = \"cornflowerblue\"\n        }\n\n        else if (relativeSpeed === \"pro\") {\n            text = \"PRO\"\n            style[\"color\"] = \"purple\"\n        }\n\n        return (\n            <h2 style={style}>{text}</h2>\n        )\n    }\n\n    function startGame() {\n        setIsTimeRunning(true)\n        setTimeRemaining(startingTime)\n        //refreshing the input box, which updates according to text stored as state\n        setText(\"\")\n        setWordCount(0)\n        setWordsPerMinute(0)\n        setRelativeSpeed(\"\")\n\n        //to focus on textarea upon START btn click\n        textBoxRef.current.disabled = false\n        textBoxRef.current.focus()\n    }\n\n    function endGame() {\n        const newWordCount = calculateWordCount(text)\n        const newTypingSpeed = calculateTypingSpeed(newWordCount, startingTime)\n\n        //store newly recorded metrics into their respective states\n        setWordCount(newWordCount)\n        setWordsPerMinute(newTypingSpeed)\n        setRelativeSpeed(calculateRelativeSpeed(newTypingSpeed))\n\n        //ensuring that game pauses and typing textarea is disabled\n        setIsTimeRunning(false)\n    }\n\n    //useEffect to run first when component updates,\n    //and when ([timeRemaining, isTimeRunning]) states change\n    useEffect(() => {\n        //if start state value equals true (aka start button is clicked) && time > 0 (i.e. count still running)\n        if (isTimeRunning && timeRemaining > 0) {\n            //setTimeout to run every 1000ms (1s)\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            }, 1000)\n        }\n        //when count reaches 0, set the isTimeRunning variable back to false\n        //and store to state the calculated metrics\n        else if (timeRemaining === 0) {\n            endGame()\n        }\n\n    }, [timeRemaining, isTimeRunning])\n\n    //function (ie. custom useTypingGame hook) to return object {} instead of array []\n    // in order to reduce error of altering/misusing the exported state and methods\n    return {\n        textBoxRef,\n        handleChange,\n        text,\n        isTimeRunning,\n        timeRemaining,\n        startGame,\n        wordsPerMinute,\n        wordCount,\n        colorify,\n        relativeSpeed\n    }\n\n}\n\nexport default useTypingGame\n","import React from \"react\"\nimport useTypingGame from \"./hooks/useTypingGame\"\n\nfunction App() {\n\n    //invoking custom hook (separated to isolate business logic from App)\n    const {\n        textBoxRef,\n        handleChange,\n        text,\n        isTimeRunning,\n        timeRemaining,\n        startGame,\n        wordsPerMinute,\n        wordCount,\n        colorify,\n        relativeSpeed\n    } = useTypingGame()\n\n    //NB. useTypingGame ^ to be passed in startingTime as arg\n    //if not, startingTime default value of 15s passed in\n    //NB.2 distinction between importing as destructured obj vs array, for more precise import\n\n    return (\n        <>\n            <h1>Speed Typer</h1>\n            <textarea\n                ref={textBoxRef}\n                onChange={handleChange}\n                value={text}\n                disabled={!isTimeRunning}\n            />\n            <h4>Time Remaining: {timeRemaining}</h4>\n            <button\n                onClick={startGame}\n                disabled={isTimeRunning}\n            >\n                START\n            </button>\n            <h1>Speed: {wordsPerMinute} wpm</h1>\n            <p5>Word Count: {wordCount}</p5>\n            {colorify(relativeSpeed)}\n        </>\n    )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))\n\n"],"sourceRoot":""}